{"version":3,"sources":["components/NavBar.styles.js","components/NavBar.jsx","DataHandlerComponent.js","components/DrinkPreview.js","components/DrinksComponent.js","components/RelatedDrinks.js","components/DrinkComponent.js","DataHandlerTestComponent.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","width","marginLeft","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","formControl","inputInput","paddingLeft","transition","transitions","create","Navbar","props","history","useHistory","useState","searchQuery","setSearchQuery","filter","setFilter","classes","handleLogoClick","setDisplayModeCallback","mode","query","limit","offset","push","useEffect","displayMode","StylesProvider","injectFirst","className","AppBar","Toolbar","IconButton","onClick","Button","variant","FormControl","InputLabel","htmlFor","Select","native","value","onChange","event","target","label","aria-label","InputBase","placeholder","input","inputProps","DataHandlerComponent","dev","promiseInput","Promise","resolve","reject","paginateData","inputData","inputOffset","inputLimit","isNaN","Error","outputDrinks","inputCount","currentData","nextOffset","nextLimit","nextData","previousOffset","previousLimit","previousData","outputData","drinks","undefined","length","slice","getDrinksAll","a","getDrinksAllJSON","then","data","console","log","fetch","response","json","getDrinkByID","drinkID","drink11000JSON","drink11001JSON","drink11002JSON","drink11003JSON","drink11004JSON","drink11005JSON","drink11006JSON","drink11007JSON","drink11008JSON","drink11009JSON","drink11010JSON","drink11011JSON","drink11012JSON","drink11013JSON","drink11014JSON","drink11016JSON","drink11019JSON","drink11020JSON","drink11021JSON","drink11022JSON","getDrinksPopular","getDrinksPopularJSON","getDrinkRandom","getDrinkRandomJSON","getDrinksRandom","getDrinksRandomJSON","getDrinksByFirstLetter","letter","getDrinksByFirstLetterJSON","getDrinksBySearch","searchString","getDrinksBySearchJSON","getDrinksByGlass","glassString","getDrinksByGlassJSON","getIngredientsAll","getIngredientsAllJSON","getDrinksByIngredients","ingredients","Array","isArray","getDrinksByIngredientsJSON","list","join","getGlassesAll","getGlassesAllJSON","getCategoriesAll","getCategoriesAllJSON","this","DrinkPreview","drink","idDrink","src","strDrinkThumb","alt","strDrink","withRouter","setData","isLoading","setIsLoading","page","setPage","pageCount","setPageCount","dataHandler","totalPages","Math","ceil","parseInt","count","handlePageChange","nextMode","next","previous","Grid","container","direction","Card","CardContent","Typography","map","index","Pagination","i","drinkId","match","params","drinkid","DrinkDetailsPage","strCategory","strTags","strInstructions","DataHandlerTestComponent","hidden","App","setDisplayMode","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2y7tCA4DeA,EA1DGC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,MAAM,aACFJ,SAAU,EACVK,QAAS,QACRP,EAAMQ,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,UAGjBG,OAAO,aACHC,SAAU,WACVC,aAAcZ,EAAMa,MAAMD,aAC1BE,gBAAiBC,YAAMf,EAAMgB,QAAQC,OAAOC,MAAO,KACnD,UAAW,CACPJ,gBAAiBC,YAAMf,EAAMgB,QAAQC,OAAOC,MAAO,MAGvDC,MAAO,QACNnB,EAAMQ,YAAYC,GAAG,MAAQ,CAC1BW,WAAYpB,EAAMK,QAAQ,GAC1Bc,MAAO,SAGfE,WAAY,CACRC,QAAStB,EAAMK,QAAQ,EAAG,GAC1BkB,OAAQ,OACRZ,SAAU,WACVa,cAAe,OACfjB,QAAS,OACTkB,WAAY,SACZC,eAAgB,UAEpBC,UAAW,CACPC,MAAO,WAEXC,YAAa,CACTD,MAAO,WAEXE,WAAW,aACPR,QAAStB,EAAMK,QAAQ,EAAG,EAAG,EAAG,GAEhC0B,YAAY,cAAD,OAAgB/B,EAAMK,QAAQ,GAA9B,OACX2B,WAAYhC,EAAMiC,YAAYC,OAAO,SACrCf,MAAO,QACNnB,EAAMQ,YAAYC,GAAG,MAAQ,CAC1BU,MAAO,OACP,UAAW,CACPA,MAAO,c,wBCgERgB,EApGA,SAACC,GACd,IAAMC,EAAUC,cADQ,EAEcC,mBAAS,IAFvB,mBAEjBC,EAFiB,KAEJC,EAFI,OAGIF,mBAAS,IAHb,mBAGjBG,EAHiB,KAGTC,EAHS,KAKlBC,EAAU9C,IAkBV+C,EAAkB,WAEtBT,EAAMU,uBAAuB,CAAEC,KAAM,UAAWC,MAAO,GAAIC,MAAO,GAAIC,OAAQ,IAC9Eb,EAAQc,KAAR,MAcF,OANAC,qBAAU,WACuB,mBAA3BhB,EAAMiB,YAAYN,MACpBN,EAAeL,EAAMiB,YAAYL,SAElC,CAACZ,EAAMiB,cAGR,cAACC,EAAA,EAAD,CAAgBC,aAAW,EAA3B,SACE,qBAAKC,UAAWZ,EAAQ3C,KAAxB,SACE,cAACwD,EAAA,EAAD,CAAQ9C,SAAS,SAAjB,SACE,eAAC+C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAY/B,MAAM,UAAUgC,QAASf,EAArC,SACE,cAAC,IAAD,MAEF,cAACgB,EAAA,EAAD,CAAQjC,MAAM,UAAU4B,UAAWZ,EAAQtC,MAAOwD,QAAQ,KAAKF,QAASf,EAAxE,yBAGA,cAACgB,EAAA,EAAD,CAAQjC,MAAM,UAAU4B,UAAWZ,EAAQtC,MAAOwD,QAAQ,KAAKF,QAlC5C,WAE3BxB,EAAMU,uBAAuB,CAAEC,KAAM,YAAaC,MAAO,GAAIC,MAAO,GAAIC,OAAQ,IAChFb,EAAQc,KAAR,MA+BQ,uBAIA,eAACY,EAAA,EAAD,CAAaD,QAAQ,WAAWN,UAAWZ,EAAQf,YAAnD,UACE,cAACmC,EAAA,EAAD,CAAYC,QAAQ,6BAApB,uBACA,eAACC,EAAA,EAAD,CACEC,QAAM,EACNC,MAAO1B,EACP2B,SAAU,SAACC,GA/BK,IAACtB,EAgCfL,EAAU2B,EAAMC,OAAOH,OAhCRpB,EAiCOsB,EAAMC,OAAOH,MAhCjDhC,EAAMU,uBAAuB,CAAEC,KAAM,iBAAkBC,MAAO,CAACA,GAAQC,MAAO,GAAIC,OAAQ,IAC1Fb,EAAQc,KAAR,MAiCYqB,MAAM,SAPR,UAQE,wBAAQC,aAAW,OAAOL,MAAM,KAChC,wBAAQA,MAAO,QAAf,mBACA,wBAAQA,MAAO,MAAf,iBACA,wBAAQA,MAAO,MAAf,iBACA,wBAAQA,MAAO,UAAf,qBACA,wBAAQA,MAAO,SAAf,0BAIJ,cAACT,EAAA,EAAD,CAAY/B,MAAM,UAAUgC,QA/DZ,WAExBxB,EAAMU,uBAAuB,CAAEC,KAAM,SAAUC,MAAOR,EAAaS,MAAO,GAAIC,OAAQ,IACtFb,EAAQc,KAAR,MA4DQ,SACE,cAAC,IAAD,MAEF,qBAAKK,UAAWZ,EAAQlC,OAAxB,SAKE,cAACgE,EAAA,EAAD,CACEC,YAAY,eACZ/B,QAAS,CACP3C,KAAM2C,EAAQjB,UACdiD,MAAOhC,EAAQd,YAEjBuC,SAjFkB,SAACC,GAE/B7B,EAAe6B,EAAMC,OAAOH,QAgFhBA,MAAO5B,EACPqC,WAAY,CAAE,aAAc,wB,mSCgS7BC,GAtWb,aAAwB,IAAD,OAAXC,EAAW,iFAKvBC,aAAe,SAACJ,GAEd,OAAO,IAAIK,SAAQ,SAASC,EAASC,GAEnCD,EAAQN,OATW,KAcvBQ,aAAe,SAACC,GAA6C,IAAlCC,EAAiC,uDAArB,EAAGC,EAAkB,uDAAP,GAEnD,GAAID,EAAc,GAAKE,MAAMF,IAAgBC,EAAa,GAAKC,MAAMD,GACnE,MAAM,IAAIE,MAAM,wDAGlB,IAaIC,EAbAC,EAAa,EACbC,EAAc,CAAC1C,OAAQoC,EAAarC,MAAOsC,GAE3CM,EAAaN,EAAaD,EAC1BQ,EAAYP,EACZQ,EAAW,CAAC7C,OAAQ2C,EAAY5C,MAAO6C,GAEvCE,EAAiBV,EAAcC,EAC/BU,EAAgBV,EAChBW,EAAe,CAAChD,OAAQ8C,EAAgB/C,MAAOgD,GAG/CE,EAAa,GAuBjB,OApBKd,GAAcA,EAAUe,aAAwBC,IAAdhB,GAGrCM,EAAaN,EAAUe,OAAOE,OAC9BZ,EAAeL,EAAUe,OAAOG,MAAMjB,EAAaO,IAHnDH,EAAe,kBAMbG,EAAaF,IACfI,EAAW,QAETC,EAAiB,IACnBE,EAAe,QAIjBC,EAAU,OAAaT,EACvBS,EAAU,MAAYR,EACtBQ,EAAU,QAAcP,EACxBO,EAAU,KAAWJ,EACrBI,EAAU,SAAeD,EAClBC,GAvDc,KA2DvBK,aA3DuB,sBA2DR,4CAAAC,EAAA,yDAAOvD,EAAP,+BAAc,EAAED,EAAhB,+BAAsB,IAC/B,EAAK8B,IADI,0CAGE,EAAKC,aAAa0B,GAC5BC,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAJrC,wEAMX4D,QAAQC,IAAI,iBAAZ,MANW,2DAUYC,MAAM,mEAVlB,eAULC,EAVK,iBAWEA,EAASC,OACrBN,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAZnC,4EAcX4D,QAAQC,IAAI,iBAAZ,MAdW,iEA3DQ,KA8EvBI,aA9EuB,uCA8ER,WAAOC,GAAP,eAAAV,EAAA,0DACT,EAAK1B,IADI,+BAGFoC,EAHE,OAIF,OAJE,OAMF,QANE,OAQF,QARE,QAUF,QAVE,QAYF,QAZE,QAcF,QAdE,QAgBF,QAhBE,QAkBF,QAlBE,QAoBF,QApBE,QAsBF,QAtBE,QAwBF,QAxBE,QA0BF,QA1BE,QA4BF,QA5BE,QA8BF,QA9BE,QAgCF,QAhCE,QAkCF,QAlCE,QAoCF,QApCE,QAsCF,QAtCE,QAwCF,QAxCE,QA0CF,QA1CE,wCAKQ,EAAKnC,aAAaoC,GAL1B,gEAOQ,EAAKpC,aAAaqC,GAP1B,kEASQ,EAAKrC,aAAasC,GAT1B,kEAWQ,EAAKtC,aAAauC,GAX1B,kEAaQ,EAAKvC,aAAawC,GAb1B,kEAeQ,EAAKxC,aAAayC,GAf1B,kEAiBQ,EAAKzC,aAAa0C,GAjB1B,kEAmBQ,EAAK1C,aAAa2C,GAnB1B,kEAqBQ,EAAK3C,aAAa4C,GArB1B,kEAuBQ,EAAK5C,aAAa6C,GAvB1B,kEAyBQ,EAAK7C,aAAa8C,GAzB1B,kEA2BQ,EAAK9C,aAAa+C,IA3B1B,kEA6BQ,EAAK/C,aAAagD,IA7B1B,kEA+BQ,EAAKhD,aAAaiD,IA/B1B,kEAiCQ,EAAKjD,aAAakD,IAjC1B,kEAmCQ,EAAKlD,aAAamD,IAnC1B,kEAqCQ,EAAKnD,aAAaoD,IArC1B,kEAuCQ,EAAKpD,aAAaqD,IAvC1B,kEAyCQ,EAAKrD,aAAasD,IAzC1B,kEA2CQ,EAAKtD,aAAauD,IA3C1B,kEA6CQ,EAAKvD,aAAaoC,GA7C1B,mGAgDXP,QAAQC,IAAI,2BAAZ,MAhDW,2DAoDYC,MAAM,kEAAD,OAAmEI,IApDpF,eAoDLH,EApDK,iBAqDEA,EAASC,OArDX,4EAuDXJ,QAAQC,IAAI,iBAAZ,MAvDW,kEA9EQ,2DA0IvB0B,iBA1IuB,sBA0IJ,4CAAA/B,EAAA,yDAAOvD,EAAP,+BAAc,EAAED,EAAhB,+BAAsB,IACnC,EAAK8B,IADQ,0CAGF,EAAKC,aAAayD,GAC9B9B,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAJ/B,wEAMf4D,QAAQC,IAAI,iBAAZ,MANe,2DAUQC,MAAM,iEAVd,eAUTC,EAVS,iBAWFA,EAASC,OACnBN,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAZjC,4EAcf4D,QAAQC,IAAI,iBAAZ,MAde,iEA1II,KA6JvB4B,eA7JuB,sBA6JN,4CAAAjC,EAAA,yDAAOvD,EAAP,+BAAc,EAAED,EAAhB,+BAAsB,IACjC,EAAK8B,IADM,0CAGA,EAAKC,aAAa2D,GAC5BhC,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAJnC,wEAMb4D,QAAQC,IAAI,iBAAZ,MANa,2DAUUC,MAAM,gEAVhB,eAUPC,EAVO,iBAWAA,EAASC,OACnBN,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAZnC,4EAcb4D,QAAQC,IAAI,iBAAZ,MAda,iEA7JM,KAgLvB8B,gBAhLuB,sBAgLL,4CAAAnC,EAAA,yDAAOvD,EAAP,+BAAc,EAAED,EAAhB,+BAAsB,IAClC,EAAK8B,IADO,0CAGD,EAAKC,aAAa6D,GAC9BlC,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAJhC,wEAMd4D,QAAQC,IAAI,iBAAZ,MANc,2DAUSC,MAAM,yEAVf,eAURC,EAVQ,iBAWDA,EAASC,OACrBN,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAZhC,4EAcd4D,QAAQC,IAAI,iBAAZ,MAdc,iEAhLK,KAmMvBgC,uBAnMuB,sBAmME,8CAAArC,EAAA,yDAAOvD,EAAP,+BAAc,EAAED,EAAhB,+BAAsB,GAAG8F,EAAzB,wBACnB,EAAKhE,IADc,6BAGdgE,EAHc,sBAIX,IAAItD,MAAM,8BAJC,uBAMR,EAAKT,aAAagE,GAC9BrC,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAPzB,0EASrB4D,QAAQC,IAAI,iBAAZ,MATqB,2DAaEC,MAAM,kEAAD,OAAmEgC,IAb1E,eAaf/B,EAbe,iBAcRA,EAASC,OACrBN,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAfzB,4EAiBrB4D,QAAQC,IAAI,iBAAZ,MAjBqB,kEAnMF,KAyNvBmC,kBAzNuB,sBAyNH,8CAAAxC,EAAA,yDAAOvD,EAAP,+BAAc,EAAED,EAAhB,+BAAsB,GAAIiG,EAA1B,wBACd,EAAKnE,IADS,6BAGTmE,EAHS,sBAIN,IAAIzD,MAAM,qCAJJ,uBAMH,EAAKT,aAAamE,GAC9BxC,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAP9B,0EAShB4D,QAAQC,IAAI,iBAAZ,MATgB,6CAaToC,EAbS,uBAcN,IAAIzD,MAAM,qCAdJ,yBAgBOsB,MAAM,kEAAD,OAAmEmC,IAhB/E,eAgBVlC,EAhBU,iBAiBHA,EAASC,OACrBN,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAlB9B,4EAoBhB4D,QAAQC,IAAI,iBAAZ,MApBgB,kEAzNG,KAkPvBsC,iBAlPuB,sBAkPJ,8CAAA3C,EAAA,yDAAOvD,EAAP,+BAAc,EAAED,EAAhB,+BAAsB,GAAIoG,EAA1B,wBACb,EAAKtE,IADQ,6BAGRsE,EAHQ,sBAIL,IAAI5D,MAAM,qCAJL,uBAMF,EAAKT,aAAasE,GAC9B3C,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAP/B,0EASf4D,QAAQC,IAAI,iBAAZ,MATe,6CAaRuC,EAbQ,uBAcL,IAAI5D,MAAM,qCAdL,yBAgBQsB,MAAM,kEAAD,OAAmEsC,IAhBhF,eAgBTrC,EAhBS,iBAiBFA,EAASC,OACrBN,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAlB/B,4EAoBf4D,QAAQC,IAAI,iBAAZ,MApBe,kEAlPI,KA2QvByC,kBA3QuB,sBA2QH,4CAAA9C,EAAA,yDAAOvD,EAAP,+BAAc,EAAED,EAAhB,+BAAsB,IACpC,EAAK8B,IADS,0CAGH,EAAKC,aAAawE,GAC5B7C,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAJhC,wEAMhB4D,QAAQC,IAAI,iBAAZ,MANgB,2DAUOC,MAAM,qEAVb,eAUVC,EAVU,iBAWHA,EAASC,OACrBN,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAZ9B,4EAchB4D,QAAQC,IAAI,iBAAZ,MAdgB,iEA3QG,KA8RvB2C,uBA9RuB,sBA8RE,gDAAAhD,EAAA,yDAAOvD,EAAP,+BAAc,EAAED,EAAhB,+BAAsB,GAAGyG,EAAzB,wBACnB,EAAK3E,IADc,6BAGd2E,GAAgBC,MAAMC,QAAQF,GAHhB,sBAIX,IAAIjE,MAAM,wDAJC,UAKe,IAAvBiE,EAAYpD,OALJ,uBAMX,IAAIb,MAAM,qCANC,yBAQN,EAAKT,aAAa6E,GAC9BlD,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAT3B,2EAWnB4D,QAAQC,IAAI,iBAAZ,MAXmB,6CAeZ4C,GAAgBC,MAAMC,QAAQF,GAflB,uBAgBT,IAAIjE,MAAM,wDAhBD,WAiBiB,IAAvBiE,EAAYpD,OAjBN,uBAkBT,IAAIb,MAAM,qCAlBD,eAqBXqE,EAAOJ,EAAYK,KAAK,KArBb,UAsBMhD,MAAM,kEAAD,OAAmE+C,IAtB9E,eAsBX9C,EAtBW,iBAuBJA,EAASC,OACrBN,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAxB7B,4EA0BnB4D,QAAQC,IAAI,iBAAZ,MA1BmB,kEA9RF,KA6TvBkD,cA7TuB,sBA6TP,4CAAAvD,EAAA,yDAAOvD,EAAP,+BAAc,EAAED,EAAhB,+BAAsB,IAChC,EAAK8B,IADK,0CAGC,EAAKC,aAAaiF,GAC9BtD,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAJlC,wEAMZ4D,QAAQC,IAAI,iBAAZ,MANY,2DAUWC,MAAM,qEAVjB,eAUNC,EAVM,iBAWCA,EAASC,OACrBN,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAZlC,4EAcZ4D,QAAQC,IAAI,iBAAZ,MAdY,iEA7TO,KAgVvBoD,iBAhVuB,sBAgVJ,4CAAAzD,EAAA,yDAAOvD,EAAP,+BAAc,EAAED,EAAhB,+BAAsB,IACnC,EAAK8B,IADQ,0CAGF,EAAKC,aAAamF,GAC9BxD,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAJ/B,wEAMf4D,QAAQC,IAAI,iBAAZ,MANe,2DAUQC,MAAM,qEAVd,eAUTC,EAVS,iBAWFA,EAASC,OACrBN,MAAK,SAACC,GAAD,OAAU,EAAKxB,aAAawB,EAAK1D,EAAOD,MAZ/B,4EAcf4D,QAAQC,IAAI,iBAAZ,MAde,iEA/UjBsD,KAAKrF,IAAMA,GCpBAsF,I,OAhBM,SAACjI,GAElB,IAAMC,EAAUC,cAMhB,OACI,sBAAKkB,UAAU,gBAAgBI,QALf,WAChBvB,EAAQc,KAAR,iBAAuBf,EAAMkI,MAAMC,WAInC,UACI,qBAAKC,IAAKpI,EAAMkI,MAAMG,cAAeC,IAAI,KACzC,4BAAItI,EAAMkI,MAAMK,gB,kDCsIbC,gBAxIS,SAACxI,GAAW,IAAD,EACTG,mBAAS,IADA,mBAC1BqE,EAD0B,KACpBiE,EADoB,OAECtI,oBAAS,GAFV,mBAE1BuI,EAF0B,KAEfC,EAFe,OAGTxI,mBAAS,GAHA,mBAG1ByI,EAH0B,KAGpBC,EAHoB,OAIC1I,mBAAS,GAJV,mBAI1B2I,EAJ0B,KAIfC,EAJe,OAKG5I,mBAAS,IALZ,6BAYjCa,qBAAU,WACR2H,GAAa,GACb,IAAMK,EAAc,IAAItG,GAClB/B,EAAOX,EAAMiB,YAAYN,KACzBC,EAAQZ,EAAMiB,YAAYL,MAC1BE,EAASd,EAAMiB,YAAYH,OAC3BD,EAAQb,EAAMiB,YAAYJ,MAGhC,OAFAgI,EAAQ,GAEAlI,GACN,IAAK,UACHqI,EAAY5C,mBAAmB7B,MAAK,SAACC,GAAD,OAAUiE,EAAQjE,MAAOD,MAAK,kBAAMoE,GAAa,MACrF,MACF,IAAK,SACC/H,EACFoI,EAAYnC,kBAAkB/F,EAAOD,EAAMD,GAC1C2D,MAAK,SAACC,GAAD,OAAUiE,EAAQjE,MACvBD,MAAK,kBAAMoE,GAAa,MAEzBK,EAAY5C,mBAAmB7B,MAAK,SAACC,GAAD,OAAUiE,EAAQjE,MAAOD,MAAK,kBAAMoE,GAAa,MAEvF,MACF,IAAK,YACHK,EAAYxC,kBAAkBjC,MAAK,SAACC,GAAD,OAAUiE,EAAQjE,MAAOD,MAAK,kBAAMoE,GAAa,MACpF,MACF,IAAK,cACHK,EAAYtC,uBAAuB5F,EAAOD,EAAMD,GAAO2D,MAAK,SAACC,GAAD,OAAUiE,EAAQjE,MAAOD,MAAK,kBAAMoE,GAAa,MAC7G,MACF,IAAK,iBACHK,EAAY3B,uBAAuBvG,EAAOD,EAAMD,GAAO2D,MAAK,SAACC,GAAD,OAAUiE,EAAQjE,MAAOD,MAAK,kBAAMoE,GAAa,MAC7G,MACF,QACEK,EAAY5C,mBAAmB7B,MAAK,SAACC,GAAD,OAAUiE,EAAQjE,MAAOD,MAAK,kBAAMoE,GAAa,SAExF,CAAC3I,EAAMiB,YAAYN,KAAMX,EAAMiB,YAAYL,MAAOZ,EAAMiB,YAAYH,OAAQd,EAAMiB,YAAYJ,QAEjGG,qBAAU,WACR,IAAIiI,EAAaC,KAAKC,KAAKC,SAAS5E,EAAK6E,OAASD,SAASpJ,EAAMiB,YAAYJ,QAC7EkI,EAAaE,KACZ,CAACzE,EAAK6E,MAAOX,EAAW1I,EAAMiB,YAAYJ,QAE7C,IAOMyI,EAAmB,SAACpH,EAAOF,GAC/ByC,QAAQC,IAAI,gBACZ,IAAI6E,EAAWvJ,EAAMiB,YACjBe,EAAQ4G,GAA6B,SAArBpE,EAAKgF,KAAK1I,SAC5ByI,EAASzI,OAAS0D,EAAKgF,KAAK1I,QAE1BkB,EAAQ4G,GAAiC,SAAzBpE,EAAKiF,SAAS3I,SAChCyI,EAASzI,OAAS0D,EAAKiF,SAAS3I,QAElCd,EAAMU,uBAAuB6I,GAC7BV,EAAQ7G,IAuCV,OACE,mCACG0G,EACC,6CAEA,sBAAKtH,UAAU,wBAAf,UACE,qBAAKA,UAAU,KAnCD,oBAAhBoD,EAAKR,OAEL,cAAC0F,GAAA,EAAD,CACAC,WAAS,EACT1L,QAAS,EACT2L,UAAU,SACVvK,WAAW,SAJX,SASF,cAACwK,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,CAAYrI,QAAQ,KAApB,mCASF8C,EAAKR,OAAOgG,KAAI,SAAC9B,EAAO+B,GACtB,OAAO,cAAC,GAAD,CAAc/B,MAAOA,GAAY+B,MAwBtC,qBAAK7I,UAAU,GAAf,SApDN,cAAC8I,GAAA,EAAD,CAAYb,MAAOP,EAAWF,KAAMA,EAAM3G,SAAUqH,EAAkB5H,QAAQ,WAAWjD,MAAM,sBCrCtF+J,I,cAAAA,aA5CO,SAACxI,GAAW,IAAD,EAELG,mBAAS,IAFJ,mBAEtBqE,EAFsB,KAEhBiE,EAFgB,OAGKtI,oBAAS,GAHd,mBAGtBuI,EAHsB,KAGXC,EAHW,KAyB7B,OAnBA3H,qBAAU,WAIN,IAFA,IAAIsG,EAAc,GAET6C,EAAI,EAAGA,GAAK,GACuB,MAApCnK,EAAMkI,MAAN,uBAA4BiC,IADZA,IAIpB7C,EAAYvG,KAAKf,EAAMkI,MAAN,uBAA4BiC,MAK7B,IAAIzH,IACZ2E,uBAAuB,EAAG,GAAIC,GACrC/C,MAAK,SAACC,GAAD,OAAUiE,EAAQjE,MACvBD,MAAK,kBAAMoE,GAAa,QAC9B,IAGC,mCACKD,EACG,8CAEA,sBAAKtH,UAAU,eAAf,UACA,oDACA,qBAAKA,UAAU,oBAAf,SACKoD,EAAKR,OAAOgG,KAAI,SAAC9B,GACd,GAAGA,EAAMC,UAAYnI,EAAMkI,MAAMC,QAC7B,OAAO,cAAC,GAAD,CAAcD,MAAOA,kBC2BnCM,gBA9DE,SAACxI,GAAW,IAAD,EAERG,mBAAS,IAFD,mBAEzBqE,EAFyB,KAEnBiE,EAFmB,OAGEtI,oBAAS,GAHX,mBAGzBuI,EAHyB,KAGdC,EAHc,KAKhC3H,qBAAU,WACR,IAAMgI,EAAc,IAAItG,GAClB0H,EAAUpK,EAAMqK,MAAMC,OAAOC,QAC/BH,GACFpB,EAAYlE,aAAasE,SAASgB,IAC/B7F,MAAK,SAACC,GAAD,OAAUiE,EAAQjE,MACvBD,MAAK,kBAAMoE,GAAa,QAE5B,CAAC3I,EAAMqK,MAAMC,OAAOC,UAEvB,IAAMC,EAAmB,SAACxK,GAGtB,IADA,IAAIsH,EAAc,GACV6C,EAAI,EAAGA,GAAK,KACqB,MAApCnK,EAAMkI,MAAN,uBAA4BiC,KAAiD,MAAjCnK,EAAMkI,MAAN,oBAAyBiC,KADlDA,IAItB7C,EAAYvG,KAAK,+BAAI,6BAAKf,EAAMkI,MAAN,uBAA4BiC,MAAU,6BAAKnK,EAAMkI,MAAN,oBAAyBiC,UAGhG,OACE,qCACA,sBAAK/I,UAAU,oBAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKgH,IAAKpI,EAAMkI,MAAMG,kBAExB,sBAAKjH,UAAU,UAAf,UACE,6BAAKpB,EAAMkI,MAAMK,WACjB,8BAAG,2CAAkBvI,EAAMkI,MAAMuC,eACjC,8BAAG,sCAAH,IAAiBzK,EAAMkI,MAAMwC,WAC7B,8BAAG,8CAAH,IAAyB1K,EAAMkI,MAAMyC,mBACrC,qBAAKvJ,UAAU,uBAAf,SACA,kCACE,+BAAI,6CAAoB,6CACvBkG,aAKP,cAAC,GAAD,CAAeY,MAAOlI,EAAMkI,YAKlC,OACE,mCACGQ,EAAc,2CAEb,8BACE,cAAC8B,EAAD,CAAkBtC,MAAO1D,EAAKR,OAAO,YCPhC4G,GAlDkB,SAAC5K,GAAW,IAAD,EAChBG,mBAAS,IADO,mBAC5BsI,GAD4B,aAENtI,oBAAS,GAFH,mBAElCuI,EAFkC,KAEvBC,EAFuB,KAI1C3H,qBAAU,YAEY,IAAI0B,IAMZ0D,mBAAmB7B,MAAK,SAACC,GAAD,OAAUiE,EAAQjE,MAAOD,MAAK,kBAAMoE,GAAa,QAsBpF,IAUH,OACED,EARQ,qBAAKmC,QAAM,EAAX,qBAIA,qBAAKA,QAAM,EAAX,qBCZGC,OAvBf,WAAe,MAGyB3K,mBAAS,CAACQ,KAAM,UAAWC,MAAO,GAAIC,MAAO,GAAIC,OAAQ,IAHlF,mBAGNG,EAHM,KAGO8J,EAHP,KAKb,OACE,sBAAK3J,UAAU,MAAf,UACE,cAAC,EAAD,CAAQH,YAAaA,EAAaP,uBAAwB,SAAC8D,GAAD,OAAUuG,EAAevG,MACnF,cAAC,GAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOwG,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,GAAD,CAAiBhK,YAAaA,EAAaP,uBAAwB,SAAC8D,GAAD,OAAUuG,EAAevG,QAE9F,cAAC,IAAD,CAAOwG,OAAK,EAACC,KAAK,kBAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,mB,SCnB5BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,KAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,Y","file":"static/js/main.1b329621.chunk.js","sourcesContent":["import { alpha, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: alpha(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: alpha(theme.palette.common.white, 0.25),\n        },\n    \n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    formControl: {\n        color: 'inherit'\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\nexport default useStyles","import React, { useState, useEffect } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n//import Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from '@material-ui/core/IconButton';\nimport LocalBarIcon from '@material-ui/icons/LocalBar';\nimport Button from '@material-ui/core/Button';\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport useStyles from './NavBar.styles'\nimport { useHistory } from 'react-router-dom'\nimport './NavBar.css'\n\n\nconst Navbar = (props) => {\n  const history = useHistory()\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filter, setFilter] = useState('')\n\n  const classes = useStyles();\n\n  const handleSearchInputChange = (event) => {\n    //console.log('Search', event.target.value);\n    setSearchQuery(event.target.value);\n  }\n  const handleSearchClick = () => {\n    //props.setSearchCallback(searchQuery);\n    props.setDisplayModeCallback({ mode: 'search', query: searchQuery, limit: 50, offset: 0 });\n    history.push(`/`);\n  }\n\n  const handleRandomizeClick = () => {\n    //props.setSearchCallback('');\n    props.setDisplayModeCallback({ mode: 'randomize', query: '', limit: 50, offset: 0 });\n    history.push(`/`);\n  }\n\n  const handleLogoClick = () => {\n    //props.setSearchCallback('');\n    props.setDisplayModeCallback({ mode: 'default', query: '', limit: 50, offset: 0 });\n    history.push(`/`);\n  }\n\n  const handleGetByIngredient = (query) => {\n    props.setDisplayModeCallback({ mode: 'mainingredient', query: [query], limit: 50, offset: 0 });\n    history.push(`/`);\n  }\n\n  useEffect(() => {\n    if (props.displayMode.mode !== 'mainingredient') {\n      setSearchQuery(props.displayMode.query)\n    }\n  }, [props.displayMode]);\n\n  return (\n    <StylesProvider injectFirst>\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton color=\"inherit\" onClick={handleLogoClick}>\n              <LocalBarIcon />\n            </IconButton>\n            <Button color=\"inherit\" className={classes.title} variant=\"h6\" onClick={handleLogoClick}>\n              CocktailDex\n            </Button>\n            <Button color=\"inherit\" className={classes.title} variant=\"h8\" onClick={handleRandomizeClick}>\n              Randomize\n            </Button>\n\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n              <InputLabel htmlFor=\"outlined-age-native-simple\">filter by</InputLabel>\n              <Select\n                native\n                value={filter}\n                onChange={(event) => {\n                  setFilter(event.target.value)\n                  handleGetByIngredient(event.target.value)\n                }}\n                label=\"Filter\">\n                <option aria-label=\"None\" value=\"\" />\n                <option value={'vodka'}>Vodka</option>\n                <option value={'gin'}>Gin</option>\n                <option value={'rum'}>Rum</option>\n                <option value={'whiskey'}>Whiskey</option>\n                <option value={'burbon'}>Burbon</option>\n              </Select>\n            </FormControl>\n\n            <IconButton color=\"inherit\" onClick={handleSearchClick}>\n              <SearchIcon />\n            </IconButton>\n            <div className={classes.search}>\n              {/* <div className={classes.searchIcon}> */}\n              {/*TODO: fix this search button in the search bar something really wrong*/}\n              {/* <SearchIcon /> */}\n              {/* </div> */}\n              <InputBase\n                placeholder=\"Search…\"\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }}\n                onChange={handleSearchInputChange}\n                value={searchQuery}\n                inputProps={{ 'aria-label': 'search' }}\n              />\n            </div>\n          </Toolbar>\n        </AppBar>\n      </div>\n    </StylesProvider>\n  );\n}\n\nexport default Navbar","import * as getDrinksPopularJSON from './mockData/getDrinksPopular.json';\nimport * as getDrinksRandomJSON from './mockData/getDrinksRandom.json';\nimport * as getDrinkRandomJSON from './mockData/getDrinkRandom.json';\nimport * as getDrinksByFirstLetterJSON from './mockData/getDrinksByFirstLetter.json';\nimport * as getDrinksByGlassJSON from './mockData/getDrinksByGlass.json';\nimport * as getIngredientsAllJSON from './mockData/getIngredientsAll.json';\nimport * as getDrinksAllJSON from './mockData/getDrinksAll.json';\nimport * as getGlassesAllJSON from './mockData/getGlassesAll.json';\nimport * as getCategoriesAllJSON from './mockData/getCategoriesAll.json';\nimport * as getDrinksBySearchJSON from './mockData/getDrinksBySearch.json';\nimport * as getDrinksByIngredientsJSON from './mockData/getDrinksByIngredients.json';\n\n//get drink by ID imports\nimport * as drink11000JSON from './mockData/drinks/11000.json';\nimport * as drink11001JSON from './mockData/drinks/11001.json';\nimport * as drink11002JSON from './mockData/drinks/11002.json';\nimport * as drink11003JSON from './mockData/drinks/11003.json';\nimport * as drink11004JSON from './mockData/drinks/11004.json';\nimport * as drink11005JSON from './mockData/drinks/11005.json';\nimport * as drink11006JSON from './mockData/drinks/11006.json';\nimport * as drink11007JSON from './mockData/drinks/11007.json';\nimport * as drink11008JSON from './mockData/drinks/11008.json';\nimport * as drink11009JSON from './mockData/drinks/11009.json';\nimport * as drink11010JSON from './mockData/drinks/11010.json';\nimport * as drink11011JSON from './mockData/drinks/11011.json';\nimport * as drink11012JSON from './mockData/drinks/11012.json';\nimport * as drink11013JSON from './mockData/drinks/11013.json';\nimport * as drink11014JSON from './mockData/drinks/11014.json';\nimport * as drink11016JSON from './mockData/drinks/11016.json';\nimport * as drink11019JSON from './mockData/drinks/11019.json';\nimport * as drink11020JSON from './mockData/drinks/11020.json';\nimport * as drink11021JSON from './mockData/drinks/11021.json';\nimport * as drink11022JSON from './mockData/drinks/11022.json';\n\n\n\n//Runs the requsted API and returns a promise with the data\nclass DataHandlerComponent {\n  constructor(dev=false) {\n    this.dev = dev;\n  }\n\n  //utility function\n  promiseInput = (input) => {\n\t  //the input parameter is in scope to the below promise now\n    return new Promise(function(resolve, reject)\n    {\n      resolve(input);\n    });\n  }\n\n    //utility function\n  paginateData = (inputData, inputOffset=0, inputLimit=50) => {\n\n    if (inputOffset < 0 || isNaN(inputOffset) || inputLimit < 0 || isNaN(inputLimit)) {\n      throw new Error('inputoffset and inputlimit must be positive integers')\n    }\n\n    let inputCount = 0;\n    let currentData = {offset: inputOffset, limit: inputLimit}\n\n    let nextOffset = inputLimit + inputOffset\n    let nextLimit = inputLimit\n    let nextData = {offset: nextOffset, limit: nextLimit}\n\n    let previousOffset = inputOffset - inputLimit\n    let previousLimit = inputLimit\n    let previousData = {offset: previousOffset, limit: previousLimit}\n\n    //prepare output\n    let outputData = {};\n    let outputDrinks\n\n    if (!inputData || !inputData.drinks || inputData === undefined) {\n      outputDrinks = 'No Drinks Found'\n    } else {\n      inputCount = inputData.drinks.length;\n      outputDrinks = inputData.drinks.slice(inputOffset, nextOffset)\n    }\n\n    if (nextOffset > inputCount) {\n      nextData = 'null';\n    }\n    if (previousOffset < 0) {\n      previousData = 'null';\n    }\n\n    //add pagination variables to data\n    outputData['drinks'] = outputDrinks;\n    outputData['count'] = inputCount;\n    outputData['current'] = currentData;\n    outputData['next'] = nextData;\n    outputData['previous'] = previousData;\n    return outputData;\n  }\n\n  //getDrinksAll Will Go Here\n  getDrinksAll = async (offset=0,limit=50) => {\n    if (this.dev) {\n      try {\n      return await this.promiseInput(getDrinksAllJSON.default)\n        .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    } else {\n      try {\n      const response = await fetch('https://www.thecocktaildb.com/api/json/v2/9973533/search.php?s=')\n      return await response.json()\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    }\n  }\n\n  getDrinkByID = async (drinkID) => {\n    if (this.dev) {\n      try {\n        switch(drinkID) {\n          case 11000:\n            return await this.promiseInput(drink11000JSON.default)\n          case 11001:\n            return await this.promiseInput(drink11001JSON.default)\n          case 11002:\n            return await this.promiseInput(drink11002JSON.default)\n          case 11003:\n            return await this.promiseInput(drink11003JSON.default)\n          case 11004:\n            return await this.promiseInput(drink11004JSON.default)\n          case 11005:\n            return await this.promiseInput(drink11005JSON.default)\n          case 11006:\n            return await this.promiseInput(drink11006JSON.default)\n          case 11007:\n            return await this.promiseInput(drink11007JSON.default)\n          case 11008:\n            return await this.promiseInput(drink11008JSON.default)\n          case 11009:\n            return await this.promiseInput(drink11009JSON.default)\n          case 11010:\n            return await this.promiseInput(drink11010JSON.default)\n          case 11011:\n            return await this.promiseInput(drink11011JSON.default)\n          case 11012:\n            return await this.promiseInput(drink11012JSON.default)\n          case 11013:\n            return await this.promiseInput(drink11013JSON.default)\n          case 11014:\n            return await this.promiseInput(drink11014JSON.default)\n          case 11016:\n            return await this.promiseInput(drink11016JSON.default)\n          case 11019:\n            return await this.promiseInput(drink11019JSON.default)\n          case 11020:\n            return await this.promiseInput(drink11020JSON.default)\n          case 11021:\n            return await this.promiseInput(drink11021JSON.default)\n          case 11022:\n            return await this.promiseInput(drink11022JSON.default)\n          default:\n            return await this.promiseInput(drink11000JSON.default)\n        }\n    } catch (error) {\n      console.log('Drink ID not in mock API', error)\n    }\n    } else {\n      try {\n      const response = await fetch(`https://www.thecocktaildb.com/api/json/v2/9973533/lookup.php?i=${drinkID}`)\n      return await response.json()\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    }\n  }\n\n  getDrinksPopular = async (offset=0,limit=50) => {\n    if (this.dev) {\n      try {\n      return await this.promiseInput(getDrinksPopularJSON.default)\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    } else {\n      try {\n      const response = await fetch('https://www.thecocktaildb.com/api/json/v2/9973533/popular.php')\n      return await response.json()\n        .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    }\n  }\n\n  getDrinkRandom = async (offset=0,limit=50) => {\n    if (this.dev) {\n      try {\n      return await this.promiseInput(getDrinkRandomJSON.default)\n        .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    } else {\n      try {\n      const response = await fetch('https://www.thecocktaildb.com/api/json/v2/9973533/random.php')\n      return await response.json()\n        .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    }\n  }\n\n  getDrinksRandom = async (offset=0,limit=50) => {\n    if (this.dev) {\n      try {\n      return await this.promiseInput(getDrinksRandomJSON.default)\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    } else {\n      try {\n      const response = await fetch('https://www.thecocktaildb.com/api/json/v2/9973533/randomselection.php')\n      return await response.json()\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    }\n  }\n\n  getDrinksByFirstLetter = async (offset=0,limit=50,letter) => {\n    if (this.dev) {\n      try {\n        if (!letter) {\n          throw new Error('expects a non empty letter')\n        }\n      return await this.promiseInput(getDrinksByFirstLetterJSON.default)\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    } else {\n      try {\n      const response = await fetch(`https://www.thecocktaildb.com/api/json/v2/9973533/search.php?f=${letter}`)\n      return await response.json()\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    }\n  }\n\n  getDrinksBySearch = async (offset=0,limit=50, searchString) => {\n    if (this.dev) {\n      try {\n        if (!searchString) {\n          throw new Error('expects a non empty search string')\n        }\n      return await this.promiseInput(getDrinksBySearchJSON.default)\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    } else {\n      try {\n        if (!searchString) {\n          throw new Error('expects a non empty search string')\n        }\n      const response = await fetch(`https://www.thecocktaildb.com/api/json/v2/9973533/search.php?s=${searchString}`)\n      return await response.json()\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    }\n  }\n\n  getDrinksByGlass = async (offset=0,limit=50, glassString) => {\n    if (this.dev) {\n      try {\n        if (!glassString) {\n          throw new Error('expects a non empty search string')\n        }\n      return await this.promiseInput(getDrinksByGlassJSON.default)\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    } else {\n      try {\n        if (!glassString) {\n          throw new Error('expects a non empty search string')\n        }\n      const response = await fetch(`https://www.thecocktaildb.com/api/json/v2/9973533/filter.php?g=${glassString}`)\n      return await response.json()\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    }\n  }\n\n  getIngredientsAll = async (offset=0,limit=50) => {\n    if (this.dev) {\n      try {\n      return await this.promiseInput(getIngredientsAllJSON.default)\n        .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    } else {\n      try {\n      const response = await fetch('https://www.thecocktaildb.com/api/json/v2/9973533/list.php?i=list')\n      return await response.json()\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    }\n  }\n\n  getDrinksByIngredients = async (offset=0,limit=50,ingredients) => {\n    if (this.dev) {\n      try {\n        if (!ingredients || !Array.isArray(ingredients)) {\n          throw new Error('expects and array of strings of approved ingredients')\n        } else if (ingredients.length === 0) {\n          throw new Error('ingredients array cannot be empty')\n        }\n        return await this.promiseInput(getDrinksByIngredientsJSON.default)\n        .then((data) => this.paginateData(data,offset,limit))\n      } catch (error) {\n        console.log('Request failed', error)\n      }\n    } else {\n        try {\n          if (!ingredients || !Array.isArray(ingredients)) {\n            throw new Error('expects and array of strings of approved ingredients')\n          } else if (ingredients.length === 0) {\n            throw new Error('ingredients array cannot be empty')\n          }\n\n          const list = ingredients.join(\",\")\n          const response = await fetch(`https://www.thecocktaildb.com/api/json/v2/9973533/filter.php?i=${list}`)\n          return await response.json()\n          .then((data) => this.paginateData(data,offset,limit))\n      } catch (error) {\n        console.log('Request failed', error)\n      }\n    }\n  }\n\n  getGlassesAll = async (offset=0,limit=50) => {\n    if (this.dev) {\n      try {\n      return await this.promiseInput(getGlassesAllJSON.default)\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    } else {\n      try {\n      const response = await fetch('https://www.thecocktaildb.com/api/json/v2/9973533/list.php?g=list')\n      return await response.json()\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    }\n  }\n\n  getCategoriesAll = async (offset=0,limit=50) => {\n    if (this.dev) {\n      try {\n      return await this.promiseInput(getCategoriesAllJSON.default)\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    } else {\n      try {\n      const response = await fetch('https://www.thecocktaildb.com/api/json/v2/9973533/list.php?c=list')\n      return await response.json()\n      .then((data) => this.paginateData(data,offset,limit))\n    } catch (error) {\n      console.log('Request failed', error)\n    }\n    }\n  }\n\n\n}\n\nexport default DataHandlerComponent","import React, {} from \"react\";\nimport {useHistory} from 'react-router-dom'\n\nconst DrinkPreview = (props) => {\n\n    const history = useHistory()\n\n    const handleClick = () => {\n        history.push(`/drink/${props.drink.idDrink}`);\n    }\n\n    return (\n        <div className=\"drink-preview\" onClick={handleClick}>\n            <img src={props.drink.strDrinkThumb} alt=\"\"></img>\n            <p>{props.drink.strDrink}</p>\n        </div>\n    )\n}\n\nexport default DrinkPreview","import React, { useEffect, useState } from \"react\"\nimport DataHandlerComponent from \"../DataHandlerComponent\";\nimport './DrinksComponent.css'\nimport { withRouter } from \"react-router-dom\";\nimport DrinkPreview from \"./DrinkPreview\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Pagination from '@material-ui/lab/Pagination';\n\nconst DrinksComponent = (props) => {\n  const [data, setData] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [page, setPage] = useState(1)\n  const [pageCount, setPageCount] = useState(1)\n  const [pagination, setPagination] = useState('')\n\n  //handles data load based on props.displayMode\n  // {mode: 'default', query: ''}\n  // {mode: 'search', query: 'query'}\n  //mode: 'default', query: '', limit: 50, offset: 0\n  // {mode: 'randomize', query: ''}\n  useEffect(() => {\n    setIsLoading(true);\n    const dataHandler = new DataHandlerComponent();\n    const mode = props.displayMode.mode;\n    const query = props.displayMode.query;\n    const offset = props.displayMode.offset;\n    const limit = props.displayMode.limit;\n    setPage(1);\n\n    switch (mode) {\n      case 'default':\n        dataHandler.getDrinksPopular().then((data) => setData(data)).then(() => setIsLoading(false))\n        break;\n      case 'search':\n        if (query) {\n          dataHandler.getDrinksBySearch(offset,limit,query)\n          .then((data) => setData(data))\n          .then(() => setIsLoading(false))\n        } else {\n          dataHandler.getDrinksPopular().then((data) => setData(data)).then(() => setIsLoading(false))\n        }\n        break;\n      case 'randomize':\n        dataHandler.getDrinksRandom().then((data) => setData(data)).then(() => setIsLoading(false))\n        break;\n      case 'firstletter':\n        dataHandler.getDrinksByFirstLetter(offset,limit,query).then((data) => setData(data)).then(() => setIsLoading(false))\n        break;\n      case 'mainingredient':\n        dataHandler.getDrinksByIngredients(offset,limit,query).then((data) => setData(data)).then(() => setIsLoading(false))\n        break;\n      default:\n        dataHandler.getDrinksPopular().then((data) => setData(data)).then(() => setIsLoading(false))\n    }\n  }, [props.displayMode.mode, props.displayMode.query, props.displayMode.offset, props.displayMode.limit]);\n\n  useEffect(() => {\n    let totalPages = Math.ceil(parseInt(data.count) / parseInt(props.displayMode.limit))\n    setPageCount(totalPages)\n  }, [data.count, isLoading, props.displayMode.limit]);\n\n  const handleGetByFirstLetter = (query) => {\n    props.setDisplayModeCallback({mode: 'firstletter', query: query, limit: 25, offset: 0});\n  }\n  const handleGetByIngredient  = (query) => {\n    props.setDisplayModeCallback({mode: 'mainingredient', query: [query], limit: 25, offset: 0});\n  }\n\n  const handlePageChange = (event, value) => {\n    console.log('page changer')\n    let nextMode = props.displayMode;\n    if (value > page && data.next.offset !== 'null') {\n      nextMode.offset = data.next.offset\n    }\n    if (value < page && data.previous.offset !== 'null') {\n      nextMode.offset = data.previous.offset\n    }\n    props.setDisplayModeCallback(nextMode);\n    setPage(value);\n  };\n\n  const displayPagination = () => {\n    return (\n      <Pagination count={pageCount} page={page} onChange={handlePageChange} variant=\"outlined\" shape=\"rounded\" />\n    )\n  }\n\n  const displayDrinks = () => {\n    if (data.drinks === 'No Drinks Found') {\n      return (\n        <Grid\n        container\n        spacing={0}\n        direction=\"column\"\n        alignItems=\"center\"\n        //justify=\"center\"\n        //style={{ display: 'flex', minHeight: '100vh' }}\n       >\n\n      <Card>\n        <CardContent>\n          <Typography variant=\"h5\">\n            No Drinks found\n          </Typography>\n        </CardContent>\n      </Card>\n      </Grid>\n      )\n    } else {\n      return (\n        data.drinks.map((drink, index) => {\n          return <DrinkPreview drink={drink} key={index} />\n        })\n      )\n    }\n  }\n\n  return (\n    <>\n      {isLoading ? (\n        <div>loading...</div>\n      ) : (\n        <div className=\"drinks-component-root\">\n          <div className=\"\">\n            {/* TODO Turn this into a drop down for all the letters of the alphabet */}\n            {/* <Button variant=\"contained\" color=\"primary\" onClick={() => handleGetByFirstLetter('m')}>\n              Drinks that start with M\n            </Button> */}\n            {/* TODO Turn this into a drop down for all the main ingredients */}\n            {/* Cognac, Tequila, Rum, Vodka, Whiskey, Gin, Bourbon */}\n            {/* <Button variant=\"contained\" color=\"primary\" onClick={() => handleGetByIngredient('vodka')}>\n              Vodka Drinks\n            </Button> */}\n          </div>\n            {displayDrinks()}\n            <div className=\"\">\n            {displayPagination()}\n          </div>\n        </div>\n      )}\n    </>\n  )\n};\n\nexport default withRouter(DrinksComponent)","import React, { useEffect, useState } from 'react'\nimport DataHandlerComponent from '../DataHandlerComponent'\nimport { withRouter } from \"react-router-dom\";\nimport DrinkPreview from './DrinkPreview';\nimport './RelatedDrinks.css'\n\nconst RelatedDrinks = (props) => {\n\n    const [data, setData] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n\n\n    useEffect(() => {\n\n        var ingredients = []\n\n        for (let i = 1; i <= 2; i++) {\n            if (props.drink[`strIngredient${i}`] == null) {\n                break;\n            }\n            ingredients.push(props.drink[`strIngredient${i}`])\n        }\n\n\n\n        const dataHandler = new DataHandlerComponent();\n        dataHandler.getDrinksByIngredients(0, 50, ingredients)\n            .then((data) => setData(data))\n            .then(() => setIsLoading(false))\n    }, []);\n\n    return (\n        <>\n            {isLoading ? (\n                <div> Loading...</div>\n            ) : (\n                <div className=\"related-root\">\n                <h4>You may also like:</h4>\n                <div className=\"RelatedDrinksList\">\n                    {data.drinks.map((drink) => {\n                        if(drink.idDrink !== props.drink.idDrink){\n                            return <DrinkPreview drink={drink}/>}\n                        })}\n                </div>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default withRouter(RelatedDrinks)","import React, { useState, useEffect } from \"react\"\nimport { withRouter } from \"react-router-dom\";\nimport DataHandlerComponent from '../DataHandlerComponent';\nimport './DrinkComponent.css'\nimport RelatedDrinks from \"./RelatedDrinks\";\n\nconst DrinkComponent = (props) => {\n\n  const [data, setData] = useState([])\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const dataHandler = new DataHandlerComponent();\n    const drinkId = props.match.params.drinkid;\n    if (drinkId) {\n      dataHandler.getDrinkByID(parseInt(drinkId))\n        .then((data) => setData(data))\n        .then(() => setIsLoading(false))\n    }\n  }, [props.match.params.drinkid]);\n\n  const DrinkDetailsPage = (props) => {\n\n      var ingredients = []\n      for(let i = 1; i <= 15; i++) {\n        if(props.drink[`strIngredient${i}`] == null || props.drink[`strMeasure${i}`] == null) {\n          break;\n        }\n        ingredients.push(<tr><td>{props.drink[`strIngredient${i}`]}</td><td>{props.drink[`strMeasure${i}`]}</td></tr>)\n      }\n\n      return(\n        <>\n        <div className=\"details-container\">\n          <div className=\"details-image\">\n            <img src={props.drink.strDrinkThumb}></img>\n          </div>\n          <div className=\"details\">\n            <h2>{props.drink.strDrink}</h2>\n            <p><b>Category: </b>{props.drink.strCategory}</p>\n            <p><b>Tags:</b> {props.drink.strTags}</p>\n            <p><b>Instructions:</b> {props.drink.strInstructions}</p>\n            <div className=\"ingredient-container\">\n            <table>\n              <tr><th>Ingredients</th><th>Measures</th></tr>\n              {ingredients}\n            </table>\n            </div>\n          </div>\n        </div>\n        <RelatedDrinks drink={props.drink}/>\n        </>\n      )\n  }\n\n  return (\n    <>\n      {isLoading ? ( <p>loading...</p>\n      ) : (\n        <div>\n          <DrinkDetailsPage drink={data.drinks[0]}/>\n          </div>)}\n      </>\n      )\n}\n\n\n\n      export default withRouter(DrinkComponent)","import React, {useState, useEffect} from \"react\"\nimport DataHandlerComponent from './DataHandlerComponent';\n\nconst DataHandlerTestComponent = (props) => {\n  const [ data, setData ] = useState([])\n  const [ isLoading, setIsLoading ] = useState(true)\n\n  useEffect(() => {\n    //passing false to the DataHandlerComponentConstructor will swtich data from mock to live\n    const dataHandler = new DataHandlerComponent();\n\n    //does not need pagination (results will always be less than 50 drinks)\n\n    //**getDrinkByID will only return IDs 11000 to 11020 in mock mode, if something is outside of this you will get 11000\n    //dataHandler.getDrinkByID(11000).then((data) => setData(data)).then(() => setIsLoading(false))\n    dataHandler.getDrinksPopular().then((data) => setData(data)).then(() => setIsLoading(false))\n    //dataHandler.getDrinkRandom().then((data) => setData(data)).then(() => setIsLoading(false))\n    //dataHandler.getDrinksRandom().then((data) => setData(data)).then(() => setIsLoading(false))\n    //dataHandler.getGlassesAll().then((data) => setData(data)).then(() => setIsLoading(false))\n    //dataHandler.getCategoriesAll().then((data) => setData(data)).then(() => setIsLoading(false))\n\n    //results may be more than 50 drinks\n    //does need pagination, first paramter is the 'offest' second parameter is the 'limit'\n    //offset=0, limit=50, then the next would be offset=50, limit=50, this data is in the loaded object as well\n\n    //**first letter will only return m in mock mode\n    //dataHandler.getDrinksByFirstLetter(0,50,'m').then((data) => setData(data)).then(() => setIsLoading(false))\n\n    //**search will only return margarita in mock mode\n    //dataHandler.getDrinksBySearch(0,50,'margarita').then((data) => setData(data)).then(() => setIsLoading(false))\n    //dataHandler.getIngredientsAll(0, 50).then((data) => setData(data)).then(() => setIsLoading(false))\n\n    //**byIngedients will only return ['vodka','gin'] in mock mode\n    //dataHandler.getDrinksByIngredients(0,50,['vodka','gin']).then((data) => setData(data)).then(() => setIsLoading(false))\n    //dataHandler.getDrinksAll(0,50).then((data) => setData(data)).then(() => setIsLoading(false))\n    //dataHandler.getDrinksByGlass(0,50,'cocktail_glass').then((data) => setData(data)).then(() => setIsLoading(false))\n\n  }, []);\n\n  const loadingText = () => {\n    return (<div hidden>Loading</div>)\n  }\n\n  const outputText = () => {\n    return (<div hidden>Output</div>)\n  }\n\n  return (\n    isLoading ? loadingText() : outputText()\n  )\n\n}\n\nexport default DataHandlerTestComponent","import React, {useState} from 'react';\nimport './App.css';\nimport './components/NavBar'\nimport { Switch, Route} from \"react-router-dom\";\nimport Navbar from './components/NavBar';\nimport DrinksComponent from './components/DrinksComponent'\nimport DrinkComponent from './components/DrinkComponent'\nimport DataHandlerTestComponent from './DataHandlerTestComponent';\n\nfunction App() {\n  // {mode: 'default', query: ''}\n  // {mode: 'search', query: 'query'}\n  const [displayMode, setDisplayMode] = useState({mode: 'default', query: '', limit: 50, offset: 0});\n\n  return (\n    <div className=\"App\">\n      <Navbar displayMode={displayMode} setDisplayModeCallback={(data) => setDisplayMode(data)} />\n      <DataHandlerTestComponent />\n      <Switch >\n          <Route exact path=\"/\" >\n            <DrinksComponent displayMode={displayMode} setDisplayModeCallback={(data) => setDisplayMode(data)} />\n          </Route>\n          <Route exact path=\"/drink/:drinkid\" >\n            <DrinkComponent />\n          </Route>\n          <Route exact path=\"/random\">\n          </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}